[{"/Users/noahneglia/Desktop/chatapp/client/src/index.js":"1","/Users/noahneglia/Desktop/chatapp/client/src/App.js":"2","/Users/noahneglia/Desktop/chatapp/client/src/reportWebVitals.js":"3","/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx":"4"},{"size":498,"mtime":1663998319360,"results":"5","hashOfConfig":"6"},{"size":195,"mtime":1664006850154,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1663975726766,"results":"8","hashOfConfig":"6"},{"size":3165,"mtime":1664063307549,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ewaln8",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/noahneglia/Desktop/chatapp/client/src/index.js",[],[],"/Users/noahneglia/Desktop/chatapp/client/src/App.js",[],[],"/Users/noahneglia/Desktop/chatapp/client/src/reportWebVitals.js",[],[],"/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx",["23"],[],"\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\nimport indexCss from \"../CSS/index.module.css\"\n\n \nconst Index = () =>{\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  const [results, setResults] = useState([])\n  const [send, setSend] = useState(\"\")\n  const [yourMessages, setYourMessages] = useState([])\n\n  const yourMsgsRev = yourMessages.slice().reverse();\n  const resultsRev = results.slice().reverse()\n\n  \n\n\n  const [socket] = useState(() => io(':8000'));\n \n\n\n  const AlwaysScrollToBottom = () => {\n    const elementRef = useRef();\n    useEffect(() => elementRef.current.scrollIntoView());\n    return <div ref={elementRef} />;\n  };\n  \n\n \n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n     socket.on(\"send_data_to_all_other_clients\", data =>{\n        setResults(prevResults =>{\n            \n            return [data, ...prevResults]\n\n        })\n    });\n    socket.on(\"console\", data =>{\n      console.log(data)\n  });\n  }, []);\n\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    socket.emit(\"event_from_client\", Object.values(send))\n    \n\n    setYourMessages(prevResults =>{\n        \n\n        return [Object.values(send)[0], ...prevResults]\n\n    })\n\n    console.log(yourMessages)\n\n   \n    \n}\n\nconst onChangeHandler = (e) => {\n    setSend({\n       send,\n       [e.target.name]: e.target.value\n    })\n    \n\n}\n  \n \n  return (\n    <div className={indexCss.container}>\n      <div className={indexCss.messageContainer}>\n\n\n      \n      \n        <div className={indexCss.yours}>\n          {\n                        yourMsgsRev.map((vals, idx) => {\n                            return(\n                        <div key={idx}>\n                            <h3 className={indexCss.yourTexts}>{vals}</h3>\n                            <AlwaysScrollToBottom/>\n                        </div>\n                        \n                        \n                        \n                    \n                            )\n                        })\n                      }\n                      \n                      </div>\n                        \n                      <div className={indexCss.theirs}>\n                          {\n                        resultsRev.map((val, idx) => {\n                            return(\n                      \n                        <div key={idx}>\n                            <h3 className={indexCss.theirTexts}>{val}</h3>\n                            <AlwaysScrollToBottom/>\n                        </div>\n                        \n \n                            )\n                        })\n                        }\n                      </div>\n                  \n                  \n        \n\n      </div>\n      \n      \n      <form id={indexCss.flex} onSubmit={submitHandler}>\n          <input type=\"text\" name='send' onChange={onChangeHandler} />\n          <button type='submit'>send</button>\n      </form>\n    </div>\n  );\n}\n \nexport default Index;\n\n\n\n",{"ruleId":"24","severity":1,"message":"25","line":47,"column":6,"nodeType":"26","endLine":47,"endColumn":8,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [socket]",{"range":"31","text":"32"},[1206,1208],"[socket]"]