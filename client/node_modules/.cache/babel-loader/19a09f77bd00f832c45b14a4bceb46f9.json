{"ast":null,"code":"var _jsxFileName = \"/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport indexCss from \"../CSS/index.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  const [results, setResults] = useState([]);\n  const [send, setSend] = useState(\"\");\n  const newResults = results.reverse();\n  const [socket] = useState(() => io(':8000'));\n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n    socket.on(\"send_data_to_all_other_clients\", data => {\n      setResults(prevResults => {\n        return [data, ...prevResults];\n      });\n    });\n  }, []);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    socket.emit(\"event_from_client\", Object.values(send)[0]);\n    setResults(prevResults => {\n      return [Object.values(send)[0], ...prevResults];\n    });\n    console.log(results);\n  };\n\n  const onChangeHandler = e => {\n    setSend({\n      send,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: indexCss.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: indexCss.messageContainer,\n      children: newResults.map((val, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: indexCss.theirTexts,\n            children: val\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: indexCss.theirTexts,\n            children: results[val + 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: indexCss.flex,\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"send\",\n        onChange: onChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"vSvF8voI6px0qNhAuvKD7qFfJa8=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","useState","useEffect","io","indexCss","Index","results","setResults","send","setSend","newResults","reverse","socket","console","log","on","data","prevResults","submitHandler","e","preventDefault","emit","Object","values","onChangeHandler","target","name","value","container","messageContainer","map","val","idx","theirTexts","flex"],"sources":["/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nimport indexCss from \"../CSS/index.module.css\"\n\n \nconst Index = () =>{\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  const [results, setResults] = useState([])\n  const [send, setSend] = useState(\"\")\n  const newResults = results.reverse()\n  \n  \n\n \n\n\n  const [socket] = useState(() => io(':8000'));\n\n\n \n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n     socket.on(\"send_data_to_all_other_clients\", data =>{\n        setResults(prevResults =>{\n            \n            return [data, ...prevResults]\n\n        })\n    });\n  }, []);\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    socket.emit(\"event_from_client\", Object.values(send)[0])\n\n    setResults(prevResults =>{\n        \n\n        return [Object.values(send)[0], ...prevResults]\n\n    })\n\n   \n    console.log(results)\n    \n}\n\nconst onChangeHandler = (e) => {\n    setSend({\n       send,\n       [e.target.name]: e.target.value\n    })\n    \n\n}\n  \n \n  return (\n    <div className={indexCss.container}>\n      <h1 className={indexCss.messageContainer}>\n\n\n                        {\n                        newResults.map((val, idx) => {\n                            return(\n                        <div key={idx}>\n                            <h3 className={indexCss.theirTexts}>{val}</h3>\n                            <h3 className={indexCss.theirTexts}>{results[val +1]}</h3>\n                        </div>\n \n                            )\n                        })\n                      }\n\n\n\n\n      </h1>\n      <form id={indexCss.flex} onSubmit={submitHandler}>\n          <input type=\"text\" name='send' onChange={onChangeHandler} />\n          <button type='submit'>send</button>\n      </form>\n    </div>\n  );\n}\n \nexport default Index;\n"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAOC,QAAP,MAAqB,yBAArB;;;AAGA,MAAMC,KAAK,GAAG,MAAK;EAAA;;EACjB;EACA;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAMS,UAAU,GAAGJ,OAAO,CAACK,OAAR,EAAnB;EAOA,MAAM,CAACC,MAAD,IAAWX,QAAQ,CAAC,MAAME,EAAE,CAAC,OAAD,CAAT,CAAzB;EAIAD,SAAS,CAAC,MAAM;IACd;IACA;IACAW,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACCF,MAAM,CAACG,EAAP,CAAU,gCAAV,EAA4CC,IAAI,IAAG;MAChDT,UAAU,CAACU,WAAW,IAAG;QAErB,OAAO,CAACD,IAAD,EAAO,GAAGC,WAAV,CAAP;MAEH,CAJS,CAAV;IAKH,CANA;EAOF,CAXQ,EAWN,EAXM,CAAT;;EAaA,MAAMC,aAAa,GAAIC,CAAD,IAAO;IAC3BA,CAAC,CAACC,cAAF;IACAR,MAAM,CAACS,IAAP,CAAY,mBAAZ,EAAiCC,MAAM,CAACC,MAAP,CAAcf,IAAd,EAAoB,CAApB,CAAjC;IAEAD,UAAU,CAACU,WAAW,IAAG;MAGrB,OAAO,CAACK,MAAM,CAACC,MAAP,CAAcf,IAAd,EAAoB,CAApB,CAAD,EAAyB,GAAGS,WAA5B,CAAP;IAEH,CALS,CAAV;IAQAJ,OAAO,CAACC,GAAR,CAAYR,OAAZ;EAEH,CAdC;;EAgBF,MAAMkB,eAAe,GAAIL,CAAD,IAAO;IAC3BV,OAAO,CAAC;MACLD,IADK;MAEL,CAACW,CAAC,CAACM,MAAF,CAASC,IAAV,GAAiBP,CAAC,CAACM,MAAF,CAASE;IAFrB,CAAD,CAAP;EAMH,CAPD;;EAUE,oBACE;IAAK,SAAS,EAAEvB,QAAQ,CAACwB,SAAzB;IAAA,wBACE;MAAI,SAAS,EAAExB,QAAQ,CAACyB,gBAAxB;MAAA,UAIkBnB,UAAU,CAACoB,GAAX,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;QACzB,oBACJ;UAAA,wBACI;YAAI,SAAS,EAAE5B,QAAQ,CAAC6B,UAAxB;YAAA,UAAqCF;UAArC;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAI,SAAS,EAAE3B,QAAQ,CAAC6B,UAAxB;YAAA,UAAqC3B,OAAO,CAACyB,GAAG,GAAE,CAAN;UAA5C;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA,GAAUC,GAAV;UAAA;UAAA;UAAA;QAAA,QADI;MAOH,CARD;IAJlB;MAAA;MAAA;MAAA;IAAA,QADF,eAoBE;MAAM,EAAE,EAAE5B,QAAQ,CAAC8B,IAAnB;MAAyB,QAAQ,EAAEhB,aAAnC;MAAA,wBACI;QAAO,IAAI,EAAC,MAAZ;QAAmB,IAAI,EAAC,MAAxB;QAA+B,QAAQ,EAAEM;MAAzC;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QApBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD,CAlFD;;GAAMnB,K;;KAAAA,K;AAoFN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}