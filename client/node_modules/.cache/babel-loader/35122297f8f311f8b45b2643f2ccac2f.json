{"ast":null,"code":"var _jsxFileName = \"/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  const [socket] = useState(() => io(':8000'));\n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n    let results = socket.on('Welcome', data => console.log(data)); // note that we're returning a callback function\n    // this ensures that the underlying socket will be closed if App is unmounted\n    // this would be more critical if we were creating the socket in a subcomponent\n\n    return () => results;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"02lsRUzKe0Wr+0z4HpDOcMYrrnE=\");\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","useState","useEffect","io","Index","socket","console","log","results","on","data"],"sources":["/Users/noahneglia/Desktop/chatapp/client/src/components/Index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n \nconst Index = () =>{\n  // notice that we pass a callback function to initialize the socket\n  // we don't need to destructure the 'setSocket' function since we won't be updating the socket state\n  const [socket] = useState(() => io(':8000'));\n \n  useEffect(() => {\n    // we need to set up all of our event listeners\n    // in the useEffect callback function\n    console.log('Is this running?');\n    let results = socket.on('Welcome', data => console.log(data));\n    \n \n    // note that we're returning a callback function\n    // this ensures that the underlying socket will be closed if App is unmounted\n    // this would be more critical if we were creating the socket in a subcomponent\n    return () => results;\n  }, []);\n \n  return (\n    <div className=\"App\">\n      <h1></h1>\n    </div>\n  );\n}\n \nexport default Index;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAGA,MAAMC,KAAK,GAAG,MAAK;EAAA;;EACjB;EACA;EACA,MAAM,CAACC,MAAD,IAAWJ,QAAQ,CAAC,MAAME,EAAE,CAAC,OAAD,CAAT,CAAzB;EAEAD,SAAS,CAAC,MAAM;IACd;IACA;IACAI,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACA,IAAIC,OAAO,GAAGH,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqBC,IAAI,IAAIJ,OAAO,CAACC,GAAR,CAAYG,IAAZ,CAA7B,CAAd,CAJc,CAOd;IACA;IACA;;IACA,OAAO,MAAMF,OAAb;EACD,CAXQ,EAWN,EAXM,CAAT;EAaA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAvBD;;GAAMJ,K;;KAAAA,K;AAyBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}